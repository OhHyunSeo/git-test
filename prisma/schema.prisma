generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          String        @unique
  email           String        @unique
  password        String
  point           Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  id              Int           @id @default(autoincrement())
  userComment     Comment[]
  userMovieReview MovieReview[]
  userPost        Post[]
  // userPaths       UserPath[]    @relation("UserPathCreator")
  userPaths       UserPath[]    @relation("UserPathCreator")
  participatingUserPaths UserPath[] @relation("ParticipatingUserPaths")
}

model Post {
  postId    Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  comment   Comment[]
  author    User?     @relation(fields: [authorId], references: [id])
}

model Comment {
  commentId Int       @id @default(autoincrement())
  content   String
  authorId  Int?
  postId    Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  author    User?     @relation(fields: [authorId], references: [id])
  post      Post?     @relation(fields: [postId], references: [postId])
}

model Movie {
  title       String
  plot        String
  genre       String
  audience    Int?
  peekview    Float?
  rating      Float?
  releaseDate String
  movieId     Int    @id @default(autoincrement())
}

model MoviePlace {
  moviePlaceId Int    @id @default(autoincrement())
  mediaType    String
  title        String
  placeName    String
  placeType    String
  description  String
  operTime     String
  restTime     String
  closedDay    String
  address      String
  lat          Float?
  lng          Float?
}

model MovieReview {
  movieReviewId Int       @id @default(autoincrement())
  content       String
  rating        Int
  authorId      Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  deletedAt     DateTime?
  movieTitle    String
  authorName    String?
  author        User?     @relation(fields: [authorId], references: [id])
}

model UserPath {
  userPathId   Int           @id @default(autoincrement())
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  creatorId    Int
  creator      User          @relation(name: "UserPathCreator", fields: [creatorId], references: [id])
  users        User[]        @relation(name: "ParticipatingUserPaths")
}
